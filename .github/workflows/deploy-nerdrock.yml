name: Deploy Nerdrock (experimental)

on:
  workflow_dispatch
  # push:
  #   branches:
  #   - main

env:
  ORG: bgm
  PROJECT: nerdrock
  STAGE: experimental

jobs:
  prepare-modules:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout IaC Directory
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          iac

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # - name: Create CloudFormation module bucket
    #   run: aws s3api create-bucket --bucket ${{ env.ORG }}-${{ env.PROJECT }}-cf-modules
    #   run: aws cloudformation register-type >-
    #     --type RESOURCE
    #     --type-name ${{ env.ORG }}::${{ env.PROJECT }}::s3-website
    #     --schema-handler-package s3://${{ env.ORG }}-${{ env.PROJECT }}-cf-modules/${{ env.ORG }}-${{ env.PROJECT }}-s3-website.zip

    - name: Install cfn
      run: pip install cloudformation-cli

    - name: Register modules
      run: |-
        for module in `ls ./iac | grep module`; do
          cd "iac/$module"
          cfn generate
          cfn submit --set-default
          cd ../..
        done

  deploy:
    runs-on: ubuntu-latest
    needs: prepare-modules

    steps:
    - name: Checkout Web Directory
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          iac
          web

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy project
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.ORG }}-${{ env.PROJECT }}-${{ env.STAGE }}
        template: ./iac/create-${{ env.PROJECT }}.template.yml
        no-fail-on-empty-changeset: "1"
        tags: '[{"Key":"project","Value":"${{ env.PROJECT }}"},{"Key":"STAGE","Value":"${{ env.STAGE }}"}]'
        parameter-overrides: >-
          Org=${{ env.ORG }},
          Project=${{ env.PROJECT }},
          Stage=${{ env.STAGE }},
          BucketName=${{ env.ORG }}-${{ env.PROJECT }}-${{ env.STAGE }}-web

    - name: Deploy static site to S3 bucket
      run: aws s3 sync ./web/ s3://${{ env.ORG }}-${{ env.PROJECT }}-${{ env.STAGE }}-web --delete --exclude serve
