service: bgm-nerdrock

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, '${file(config.yml):aws.region}'}
  iam:
    role: arn:aws:iam::${file(config.yml):aws.account}:role/service-role/${file(config.yml):aws.role}
  stackTags:
    project: nerdrock
  tags:
    project: nerdrock
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
  lambdaHashingVersion: 20201221

plugins:
  - serverless-api-compression
  - fullstack-serverless
  - serverless-python-requirements

custom:
  environment:
    stackName: ${self:service}-${self:provider.stage}
    config: config.yml
    secretsBucket: ${self:custom.environment.stackName}-secrets
    secretsFile: secrets.yml
    log_level: DEBUG
  integration:
    responseTemplate: "$input.json('$')"
    errorTemplate: '$input.path(''$.errorMessage'').replaceAll("''", ''"'').replaceAll(''None'', ''""'')'
    response:
      headers:
        Content-Type: "'application/json'"
        Access-Control-Allow-Origin: "'*'"
      template: ${self:custom.integration.responseTemplate}
      statusCodes:
        200:
          pattern: ""
        401:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: ".*InvalidTokenError.*"
        403:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: ".*InvalidKeyError.*"
        500:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: ".*InternalError.*"
  contentCompression: 1024

  fullstack:
    bucketName: web
    distributionFolder: web
    indexDocument: index.html
    errorDocument: error.html
    singlePageApp: false
    compressWebContent: true
    defaultCacheBehavior:
      CachePolicyId: Managed-CachingOptimized
    apiPath: api
    clientSrcPath: client
    noConfirm: true
  pythonRequirements:
    dockerizePip: true

functions:
  badges:
    handler: handlers.handle_badges
    timeout: 5
    memorySize: 128
    environment: ${self:custom.environment}
    events:
      - http: # Get new token with no badges
          path: ${self:custom.fullstack.apiPath}/badges
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/badges/{token}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']"
                }'
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/badges/{token}/{key}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']",
                "key": "$input.params().path[''key'']"
                }'
          response: ${self:custom.integration.response}
          cors: true

  discography:
    handler: handlers.handle_discography
    timeout: 15
    memorySize: 128
    environment: ${self:custom.environment}
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/discography
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/discography/{token}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']"
                }'
          response: ${self:custom.integration.response}
          cors: true

  databaseRefresh:
    handler: handlers.handle_database_refresh
    timeout: 30
    memorySize: 128
    environment: ${self:custom.environment}
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/database/refresh
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true

# Raw AWS CloudFormation goes in here.
resources:
  Description: The CloudFormation stack for the bgm-nerdrock project
  Resources:
    albumInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bgm-nerdrock-${self:provider.stage}-${file(config.yml):aws.albumTable}
        AttributeDefinitions:
          - AttributeName: album_id
            AttributeType: N
        KeySchema:
          - AttributeName: album_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    trackInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bgm-nerdrock-${self:provider.stage}-${file(config.yml):aws.trackTable}
        AttributeDefinitions:
          - AttributeName: album_id
            AttributeType: N
          - AttributeName: number
            AttributeType: N
        KeySchema:
          - AttributeName: album_id
            KeyType: HASH
          - AttributeName: number
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ResourceGroup:
      Type: "AWS::ResourceGroups::Group"
      Properties:
        Name: "bgm-nerdrock-resources-${self:provider.stage}"
        Description: "All ${self:provider.stage} resources in the NerdRock project"
        Tags:
          - Key: project
            Value: ${self:provider.stackTags.project}
          - Key: STAGE
            Value: ${self:provider.stage}
