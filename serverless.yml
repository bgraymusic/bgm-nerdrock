# This file is the main config file for your service.
#
# For full config options, check the docs:
#    docs.serverless.com

service: bgm-nerdrock
# project: nerdrock

# appConfig: $(file(../config.yml))

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  role: arn:aws:iam::028568048704:role/service-role/bgmMicroserviceRole
  stackTags:
    project: nerdrock
  tags:
    project: nerdrock
  apiGateway:
    shouldStartNameWithService: true

plugins:
  - fullstack-serverless
  - serverless-python-requirements

custom:
  integration:
    responseTemplate: "$input.json('$')"
    errorTemplate: "$input.json('$.errorMessage')"
    response:
      headers:
        Content-Type: "'application/json'"
        Access-Control-Allow-Origin: "'*'"
      template: ${self:custom.integration.responseTemplate}
      statusCodes:
        200:
          pattern: ''
        401:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: ".*InvalidTokenError.*"
        403:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: '.*InvalidKeyError.*'
        500:
          template:
            application/json: ${self:custom.integration.errorTemplate}
          pattern: '.*InternalError.*'

  fullstack:
    bucketName: web
    distributionFolder: web
    indexDocument: index.html
    errorDocument: error.html
    singlePageApp: true
    compressWebContent: true
    apiPath: api
    clientSrcPath: client
  pythonRequirements:
    dockerizePip: true

functions:

  badges:
    handler: handlers.handle_badges
    timeout: 5
    memorySize: 128
    environment:
      config: config.yml
      secretsBucket: bgm-nerdrock-dev-secrets
      secretsFile: secrets.yml
      log_level: DEBUG
    events:
      - http: # Get new token with no badges
          path: ${self:custom.fullstack.apiPath}/badges
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/badges/{token}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']"
                }'
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/badges/{token}/{key}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']",
                "key": "$input.params().path[''key'']"
                }'
          response: ${self:custom.integration.response}
          cors: true
  
  discography:
    handler: handlers.handle_discography
    timeout: 15
    memorySize: 128
    environment:
      config: config.yml
      secretsBucket: bgm-nerdrock-dev-secrets
      secretsFile: secrets.yml
      log_level: DEBUG
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/discography
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true
      - http:
          path: ${self:custom.fullstack.apiPath}/discography/{token}
          method: get
          integration: lambda
          request:
            template:
              application/json: '{
                "token": "$input.params().path[''token'']"
              }'
          response: ${self:custom.integration.response}
          cors: true

  discographyCacheRefresh:
    handler: handlers.handle_refresh_discography_cache
    timeout: 15
    memorySize: 128
    environment:
      config: config.yml
      secretsBucket: bgm-nerdrock-dev-secrets
      secretsFile: secrets.yml
      log_level: DEBUG
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/discography/refresh
          method: get
          integration: lambda
          request:
            template:
              application/json: "{}"
          response: ${self:custom.integration.response}
          cors: true
      - sns:
          # topicName: $(self:appConfig.aws.sns.refreshDiscographyCache.topic)
          topicName: RefreshDiscographyCache
          displayName: Force reload of discography data from BandCamp

# Raw AWS CloudFormation goes in here.
resources:
  Description: The CloudFormation stack for the bgm-nerdrock project
  # Resources:
  #   GatewayResponse401Unauthorized:
  #     Type: "AWS::ApiGateway::GatewayResponse"
  #     Properties:
  #       ResponseType: UNAUTHORIZED
  #       RestApiId:
  #         Ref: "ApiGatewayRestApi"
  #       StatusCode: "401"
